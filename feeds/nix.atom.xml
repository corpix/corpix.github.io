<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">corpix/blog: Posts tagged 'nix'</title>
 <link rel="self" href="https://corpix.dev/feeds/nix.atom.xml" />
 <link href="https://corpix.dev/tags/nix.html" />
 <id>urn:https-corpix-dev:-tags-nix-html</id>
 <updated>2022-08-28T21:00:00Z</updated>
 <entry>
  <title type="text">Terraforming NixOS hosts</title>
  <link rel="alternate" href="https://corpix.dev/2022/08/terraforming-nixos-hosts.html?utm_source=nix&amp;utm_medium=Atom" />
  <id>urn:https-corpix-dev:-2022-08-terraforming-nixos-hosts-html</id>
  <published>2022-08-28T21:00:00Z</published>
  <updated>2022-08-28T21:00:00Z</updated>
  <author>
   <name>Dmitry Moskowski</name></author>
  <content type="html">
&lt;p&gt;I&amp;rsquo;ve made a provider to deploy Nixos hosts with Terraform.&lt;/p&gt;

&lt;p&gt;Here is a list of features it support at this moment:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;configuration deployment&lt;/li&gt;
 &lt;li&gt;secrets deployment&lt;/li&gt;
 &lt;li&gt;SSH bastions&lt;/li&gt;
 &lt;li&gt;provider, Nix, SSH settings overriding on per-host basis&lt;/li&gt;
 &lt;li&gt;host addresses prioritization&lt;/li&gt;&lt;/ul&gt;&lt;a href="https://corpix.dev/2022/08/terraforming-nixos-hosts.html?utm_source=nix&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">reproducible docker containers</title>
  <link rel="alternate" href="https://corpix.dev/2019/02/reproducible-docker-containers.html?utm_source=nix&amp;utm_medium=Atom" />
  <id>urn:https-corpix-dev:-2019-02-reproducible-docker-containers-html</id>
  <published>2019-02-03T20:48:16Z</published>
  <updated>2019-02-03T20:48:16Z</updated>
  <author>
   <name>Dmitry Moskowski</name></author>
  <content type="html">
&lt;p&gt;Многие сегодня используют docker для доставки своих решений в продакшен. Обычно образы собираются с помощью т.н. &lt;code&gt;Dockerfile&lt;/code&gt;, который может иметь следующий вид:&lt;/p&gt;

&lt;div class="brush: dockerfile"&gt;
 &lt;div class="source"&gt;
  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;golang:latest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;builder&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/go/src&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;app
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;alpine:latest&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--from&lt;span class="o"&gt;=&lt;/span&gt;builder&lt;span class="w"&gt; &lt;/span&gt;/go/src/app&lt;span class="w"&gt; &lt;/span&gt;/bin/app
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/bin/app
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Можно ли сказать что образ, полученный в результате сборки с указанным &lt;code&gt;Dockerfile&lt;/code&gt;, будет воспроизводимым?&lt;/p&gt;

&lt;p&gt;Нет. Эта заметка объясняет:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;почему&lt;/li&gt;
 &lt;li&gt;как писать &lt;code&gt;Dockerfile&lt;/code&gt; чтобы приблизиться к воспроизводимости&lt;/li&gt;
 &lt;li&gt;чем заменить &lt;code&gt;Dockerfile&lt;/code&gt; чтобы сделать сборки воспроизводимыми&lt;/li&gt;&lt;/ul&gt;&lt;a href="https://corpix.dev/2019/02/reproducible-docker-containers.html?utm_source=nix&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">emacs + go-mode + lsp + REPL</title>
  <link rel="alternate" href="https://corpix.dev/2019/02/emacs-go-mode-lsp-repl.html?utm_source=nix&amp;utm_medium=Atom" />
  <id>urn:https-corpix-dev:-2019-02-emacs-go-mode-lsp-repl-html</id>
  <published>2019-02-02T16:46:44Z</published>
  <updated>2019-02-02T16:46:44Z</updated>
  <author>
   <name>Dmitry Moskowski</name></author>
  <content type="html">
&lt;p&gt;Некоторое время назад я начал переезжать с spacemacs обратно на самописную конфигурацию(мне так стабильнее и кастомайзить проще). Common LISP и scheme работают почти без настройки, а вот с golang пришлось поплясать.&lt;/p&gt;

&lt;p&gt;Цель: настроить среду разработки, которая способна:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;к автокомплиту&lt;/li&gt;
 &lt;li&gt;выводу документации&lt;/li&gt;
 &lt;li&gt;go to definition&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Это минимум, необходимый мне для работы.&lt;/p&gt;

&lt;p&gt;Скажу сразу:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;не всё заработало&lt;/li&gt;
 &lt;li&gt;некоторые вещи тормозят&lt;/li&gt;
 &lt;li&gt;некоторые работают странно&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Но жить можно, плюс ко всему - понятно что улучшать.&lt;/p&gt;&lt;a href="https://corpix.dev/2019/02/emacs-go-mode-lsp-repl.html?utm_source=nix&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>